name: Release

concurrency:
  group: "release-${{ github.ref }}" # Groups runs by the branch reference
  cancel-in-progress: false # Queues new runs instead of canceling

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-24.04
    outputs:
      new_version: ${{ steps.determine_version.outputs.new_version }}
      zero_version: ${{ steps.determine_zero_version.outputs.zero_version }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          architecture: "x64"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine next version
        id: determine_version
        run: |
          NEW_VERSION=$(pnpm release --ci --release-version | tail -n1)
          echo "Next version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Determine Zero server version
        id: determine_zero_version
        run: |
          ZERO_VERSION=$(yq e '.packages | keys | .[] | select(test("@rocicorp/zero@"))' pnpm-lock.yaml | grep @rocicorp/zero | cut -f 3 -d @)
          echo "Zero version: $ZERO_VERSION"
          echo "zero_version=$ZERO_VERSION" >> $GITHUB_OUTPUT

  build-push-amd64:
    name: Build & push ${{ matrix.app }} - x64 (AMD64)
    runs-on: ubuntu-24.04
    needs: prepare
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - app: web
            dockerfile: ./apps/web/Dockerfile
          # - app: web-bun
          #   dockerfile: ./apps/web/Dockerfile.bun
          - app: api
            dockerfile: ./apps/api/Dockerfile
          - app: sync
            dockerfile: ./apps/sync/Dockerfile

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Checkout submodule for static assets
        uses: actions/checkout@v4
        with:
          repository: avelinapp/assets
          path: apps/web/static
          token: ${{ secrets.GH_AVELINAPP_RO_ACCESS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push ${{ matrix.app }}
        if: ${{ matrix.app != 'web-bun' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/avelinapp/${{ matrix.app }}:latest-amd64
            ghcr.io/avelinapp/${{ matrix.app }}:${{ github.sha }}-amd64
            ghcr.io/avelinapp/${{ matrix.app }}:${{ needs.prepare.outputs.new_version }}-amd64
            ghcr.io/avelinapp/${{ matrix.app }}:v${{ needs.prepare.outputs.new_version }}-amd64
          build-args: |
            NEXT_PUBLIC_APP_URL=https://avelin.app
            NEXT_PUBLIC_API_URL=https://api.avelin.app
            NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
            NEXT_PUBLIC_ZERO_URL=https://zero.avelin.app
            NEXT_PUBLIC_BASE_DOMAIN=avelin.app
            NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Build and Push ${{ matrix.app }}
      #   if: ${{ matrix.app == 'web-bun' }}
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: ${{ matrix.dockerfile }}
      #     push: true
      #     platforms: linux/amd64
      #     tags: |
      #       ghcr.io/avelinapp/web:latest-bun-amd64
      #       ghcr.io/avelinapp/web:${{ github.sha }}-bun-amd64
      #       ghcr.io/avelinapp/web:${{ needs.prepare.outputs.new_version }}-bun-amd64
      #       ghcr.io/avelinapp/web:v${{ needs.prepare.outputs.new_version }}-bun-amd64
      #     build-args: |
      #       NEXT_PUBLIC_APP_URL=https://avelin.app
      #       NEXT_PUBLIC_API_URL=https://api.avelin.app
      #       NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
      #       NEXT_PUBLIC_ZERO_URL=https://zero.avelin.app
      #       NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

  # build-push-arm64:
  #   name: Build & push ${{ matrix.app }} - ARM64
  #   runs-on: ubuntu-24.04-arm
  #   needs: prepare
  #   permissions:
  #     contents: read
  #     packages: write
  #
  #   strategy:
  #     matrix:
  #       include:
  #         - app: web
  #           dockerfile: ./apps/web/Dockerfile
  #         # - app: web-bun
  #         #   dockerfile: ./apps/web/Dockerfile.bun
  #         - app: api
  #           dockerfile: ./apps/api/Dockerfile
  #         - app: sync
  #           dockerfile: ./apps/sync/Dockerfile
  #
  #   steps:
  #     - name: Checkout monorepo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Checkout submodule for static assets
  #       uses: actions/checkout@v4
  #       with:
  #         repository: avelinapp/assets
  #         path: apps/web/static
  #         token: ${{ secrets.GH_AVELINAPP_RO_ACCESS }}
  #
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Build and Push ${{ matrix.app }}
  #       if: ${{ matrix.app != 'web-bun' }}
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: ${{ matrix.dockerfile }}
  #         push: true
  #         platforms: linux/arm64
  #         tags: |
  #           ghcr.io/avelinapp/${{ matrix.app }}:latest-arm64
  #           ghcr.io/avelinapp/${{ matrix.app }}:${{ github.sha }}-arm64
  #           ghcr.io/avelinapp/${{ matrix.app }}:${{ needs.prepare.outputs.new_version }}-arm64
  #           ghcr.io/avelinapp/${{ matrix.app }}:v${{ needs.prepare.outputs.new_version }}-arm64
  #         build-args: |
  #           NEXT_PUBLIC_APP_URL=https://avelin.app
  #           NEXT_PUBLIC_API_URL=https://api.avelin.app
  #           NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
  #           NEXT_PUBLIC_ZERO_URL=https://zero.avelin.app
  #           NEXT_PUBLIC_BASE_DOMAIN=avelin.app
  #           NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # - name: Build and Push ${{ matrix.app }}
  #   if: ${{ matrix.app == 'web-bun' }}
  #   uses: docker/build-push-action@v6
  #   with:
  #     context: .
  #     file: ${{ matrix.dockerfile }}
  #     push: true
  #     platforms: linux/arm64
  #     tags: |
  #       ghcr.io/avelinapp/web:latest-bun-arm64
  #       ghcr.io/avelinapp/web:${{ github.sha }}-bun-arm64
  #       ghcr.io/avelinapp/web:${{ needs.prepare.outputs.new_version }}-bun-arm64
  #       ghcr.io/avelinapp/web:v${{ needs.prepare.outputs.new_version }}-bun-arm64
  #     build-args: |
  #       NEXT_PUBLIC_APP_URL=https://avelin.app
  #       NEXT_PUBLIC_API_URL=https://api.avelin.app
  #       NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
  #       NEXT_PUBLIC_ZERO_URL=https://zero.avelin.app
  #       NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
  #     cache-from: type=gha
  #     cache-to: type=gha,mode=max

  create-manifests:
    name: Create image manifests
    # needs: [prepare, build-push-amd64, build-push-arm64]
    needs: [prepare, build-push-amd64]
    runs-on: ubuntu-24.04

    steps:
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push final manifests (SHA, version)
        run: |
          VERSION=${{ needs.prepare.outputs.new_version }}

          APPS=("web" "api" "sync")

          for app in "${APPS[@]}"; do
            DIGEST_AMD64=$(docker manifest inspect ghcr.io/avelinapp/$app:${{ github.sha }}-amd64 | jq -r '.manifests[] | select(.platform.architecture == "amd64" and .platform.os == "linux") | .digest')
            # DIGEST_ARM64=$(docker manifest inspect ghcr.io/avelinapp/$app:${{ github.sha }}-arm64 | jq -r '.manifests[] | select(.platform.architecture == "arm64" and .platform.os == "linux") | .digest')

            docker manifest create \
              ghcr.io/avelinapp/$app:${{ github.sha }} \
              --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64
              # --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
              # --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64

            docker manifest push ghcr.io/avelinapp/$app:${{ github.sha }}

            docker manifest create \
              ghcr.io/avelinapp/$app:$VERSION \
              --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64
              # --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
              # --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64

            docker manifest push ghcr.io/avelinapp/$app:$VERSION

            docker manifest create \
              ghcr.io/avelinapp/$app:v$VERSION \
              --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64
              # --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
              # --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64

            docker manifest push ghcr.io/avelinapp/$app:v$VERSION
          done

      # - name: Create and push final manifests (SHA, version)
      #   run: |
      #     VERSION=${{ needs.prepare.outputs.new_version }}
      #
      #     APPS=("web")
      #
      #     for app in "${APPS[@]}"; do
      #       DIGEST_AMD64=$(docker manifest inspect ghcr.io/avelinapp/$app:${{ github.sha }}-bun-amd64 | jq -r '.manifests[] | select(.platform.architecture == "amd64" and .platform.os == "linux") | .digest')
      #       DIGEST_ARM64=$(docker manifest inspect ghcr.io/avelinapp/$app:${{ github.sha }}-bun-arm64 | jq -r '.manifests[] | select(.platform.architecture == "arm64" and .platform.os == "linux") | .digest')
      #
      #       docker manifest create \
      #         ghcr.io/avelinapp/$app:${{ github.sha }}-bun \
      #         --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
      #         --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64
      #
      #       docker manifest push ghcr.io/avelinapp/$app:${{ github.sha }}-bun
      #
      #       docker manifest create \
      #         ghcr.io/avelinapp/$app:$VERSION-bun \
      #         --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
      #         --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64
      #
      #       docker manifest push ghcr.io/avelinapp/$app:$VERSION-bun
      #
      #       docker manifest create \
      #         ghcr.io/avelinapp/$app:v$VERSION-bun \
      #         --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
      #         --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64
      #
      #       docker manifest push ghcr.io/avelinapp/$app:v$VERSION-bun
      #     done

  update-manifests:
    name: Update manifests in avelinapp/gitops
    runs-on: ubuntu-24.04
    needs: [prepare, create-manifests]
    permissions:
      contents: write

    steps:
      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: avelinapp/gitops
          token: ${{ secrets.GH_IAC_SECRET }}
          fetch-depth: 0
          path: avelinapp-gitops

      - name: Update K8s manifests
        working-directory: avelinapp-gitops
        run: |
          VERSION=v${{ needs.prepare.outputs.new_version }}
          apps=("web" "api" "sync")
          manifests_dir="gitops/cluster-apps/avelin"
          for app in "${apps[@]}"; do
            manifest="$manifests_dir/$app/${app}-deploy.yaml"
            if [ -f "$manifest" ]; then
              echo "Updating image tag in $manifest to $VERSION"
              yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/$app:$VERSION\"" "$manifest"
            else
              echo "Manifest file $manifest not found!"
              exit 1
            fi
          done

      # - name: Update K8s manifests (web-bun)
      #   working-directory: avelinapp-iac
      #   run: |
      #     VERSION=v${{ needs.prepare.outputs.new_version }}-bun
      #     manifests_dir="gitops/cluster-apps/avelin"
      #     manifest="$manifests_dir/web/web-bun-deploy.yaml"
      #     if [ -f "$manifest" ]; then
      #       echo "Updating image tag in $manifest to $VERSION"
      #       yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/web:$VERSION\"" "$manifest"
      #     else
      #       echo "Manifest file $manifest not found!"
      #       exit 1
      #     fi

      - name: Update Zero server manifest
        working-directory: avelinapp-gitops
        run: |
          ZERO_VERSION=${{ needs.prepare.outputs.zero_version }}
          manifests_dir="gitops/cluster-apps/avelin"
          manifest="$manifests_dir/zero/zero-deploy.yaml"
          if [ -f "$manifest" ]; then
            echo "Updating Zero server container image tag in $manifest to $ZERO_VERSION"
            yq e -i ".spec.template.spec.containers[].image = \"rocicorp/zero:$ZERO_VERSION\"" "$manifest"
          else
            echo "Manifest file $manifest not found!"
            exit 1
          fi

      - name: Commit and Push GitOps manifest changes
        working-directory: avelinapp-gitops
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add .

          if ! git diff-index --quiet HEAD --; then
            git commit -m "chore: update manifests to v${{ needs.prepare.outputs.new_version }}"
            git push
          else
            echo "No changes to commit"
          fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [update-manifests]
    permissions:
      contents: write

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          architecture: "x64"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create GitHub release
        run: pnpm release --ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-migrations:
    name: Run migrations
    needs: [create-release]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          architecture: "x64"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Migrate database
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CI: true
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> packages/database/.env
          echo "CI=$CI" >> packages/database/.env
          pnpm run db:migrate
          rm packages/database/.env

      ### Not used since Zero v0.17
      # `schemaVersion` is no longer used, in favour of
      # TypeScript-style structural typing to detect schema changes
      # https://zero.rocicorp.dev/docs/release-notes/0.17
      ################################################################
      # - name: Bump Zero schema version
      #   env:
      #     ZERO_UPSTREAM_DB: ${{ secrets.DATABASE_URL }}
      #   run: |
      #     echo "ZERO_UPSTREAM_DB=$ZERO_UPSTREAM_DB" >> packages/zero/.env
      #     echo "CI=$CI" >> packages/zero/.env

      #     pnpm run zero:migrate

      - name: Deploy latest Zero permissions
        env:
          ZERO_UPSTREAM_DB: ${{ secrets.DATABASE_URL }}
        run: |
          # build database before deploying; otherwise drizzle schema won't load
          pnpm turbo @avelin/database#build

          echo "ZERO_UPSTREAM_DB=$ZERO_UPSTREAM_DB" >> packages/zero/.env
          echo "CI=$CI" >> packages/zero/.env

          pnpm run zero:deploy-permissions
          rm packages/zero/.env
