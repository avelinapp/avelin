name: Release

concurrency:
  group: "release-${{ github.ref }}" # Groups runs by the branch reference
  cancel-in-progress: false # Queues new runs instead of canceling

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-24.04
    outputs:
      new_version: ${{ steps.determine_version.outputs.new_version }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          architecture: "x64"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Determine next version
        id: determine_version
        run: |
          NEW_VERSION=$(pnpm release --ci --release-version | tail -n1)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-push-amd64:
    name: Build & push ${{ matrix.app }} - x64 (AMD64)
    runs-on: ubuntu-24.04
    needs: prepare
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - app: web
            dockerfile: ./apps/web/Dockerfile
          - app: api
            dockerfile: ./apps/api/Dockerfile
          - app: sync
            dockerfile: ./apps/sync/Dockerfile
          - app: migrate
            dockerfile: ./packages/database/Dockerfile

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout submodule for static assets
        uses: actions/checkout@v4
        with:
          repository: avelinapp/assets
          path: apps/web/static
          token: ${{ secrets.GH_AVELINAPP_RO_ACCESS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push ${{ matrix.app }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/avelinapp/${{ matrix.app }}:latest-amd64
            ghcr.io/avelinapp/${{ matrix.app }}:${{ github.sha }}-amd64
            ghcr.io/avelinapp/${{ matrix.app }}:${{ needs.prepare.outputs.new_version }}-amd64
            ghcr.io/avelinapp/${{ matrix.app }}:v${{ needs.prepare.outputs.new_version }}-amd64
          build-args: |
            NEXT_PUBLIC_APP_URL=https://avelin.app
            NEXT_PUBLIC_API_URL=https://api.avelin.app
            NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
            NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-push-arm64:
    name: Build & push ${{ matrix.app }} - ARM64
    runs-on: ubuntu-24.04-arm
    needs: prepare
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - app: web
            dockerfile: ./apps/web/Dockerfile
          - app: api
            dockerfile: ./apps/api/Dockerfile
          - app: sync
            dockerfile: ./apps/sync/Dockerfile
          - app: migrate
            dockerfile: ./packages/database/Dockerfile

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout submodule for static assets
        uses: actions/checkout@v4
        with:
          repository: avelinapp/assets
          path: apps/web/static
          token: ${{ secrets.GH_AVELINAPP_RO_ACCESS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push ${{ matrix.app }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ghcr.io/avelinapp/${{ matrix.app }}:latest-arm64
            ghcr.io/avelinapp/${{ matrix.app }}:${{ github.sha }}-arm64
            ghcr.io/avelinapp/${{ matrix.app }}:${{ needs.prepare.outputs.new_version }}-arm64
            ghcr.io/avelinapp/${{ matrix.app }}:v${{ needs.prepare.outputs.new_version }}-arm64
          build-args: |
            NEXT_PUBLIC_APP_URL=https://avelin.app
            NEXT_PUBLIC_API_URL=https://api.avelin.app
            NEXT_PUBLIC_SYNC_URL=wss://sync.avelin.app
            NEXT_PUBLIC_POSTHOG_KEY=phc_ClqyvBT8tnlp26PQhvbWZHuSMvrn6gq0CZEqfzwI3JC
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifests:
    name: Create image manifests
    needs: [prepare, build-push-amd64, build-push-arm64]
    runs-on: ubuntu-24.04

    steps:
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push final manifests (SHA, version)
        run: |
          VERSION=${{ needs.prepare.outputs.new_version }}

          APPS=("web" "api" "sync" "migrate")

          for app in "${APPS[@]}"; do
            DIGEST_AMD64=$(docker manifest inspect ghcr.io/avelinapp/$app:${{ github.sha }}-amd64 | jq -r '.manifests[] | select(.platform.architecture == "amd64" and .platform.os == "linux") | .digest')
            DIGEST_ARM64=$(docker manifest inspect ghcr.io/avelinapp/$app:${{ github.sha }}-arm64 | jq -r '.manifests[] | select(.platform.architecture == "arm64" and .platform.os == "linux") | .digest')

            docker manifest create \
              ghcr.io/avelinapp/$app:${{ github.sha }} \
              --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
              --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64

            docker manifest push ghcr.io/avelinapp/$app:${{ github.sha }}

            docker manifest create \
              ghcr.io/avelinapp/$app:$VERSION \
              --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
              --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64

            docker manifest push ghcr.io/avelinapp/$app:$VERSION

            docker manifest create \
              ghcr.io/avelinapp/$app:v$VERSION \
              --amend ghcr.io/avelinapp/$app@$DIGEST_AMD64 \
              --amend ghcr.io/avelinapp/$app@$DIGEST_ARM64

            docker manifest push ghcr.io/avelinapp/$app:v$VERSION
          done

  update-manifests-bazzalabs-orion:
    name: Update manifests in bazzalabs/orion
    runs-on: ubuntu-24.04
    needs: [prepare, create-manifests]
    permissions:
      contents: write

    steps:
      - name: Checkout IaC repo
        uses: actions/checkout@v4
        with:
          repository: bazzalabs/orion
          token: ${{ secrets.GH_BAZZALABS_ORION_SECRET }}
          fetch-depth: 0
          path: bazzalabs-orion

      - name: Update K8s manifests
        working-directory: bazzalabs-orion
        run: |
          VERSION=v${{ needs.prepare.outputs.new_version }}
          apps=("web" "api" "sync")
          manifests_dir="gitops/cluster-apps/avelin"
          for app in "${apps[@]}"; do
            manifest="$manifests_dir/$app/${app}-deploy.yaml"
            if [ -f "$manifest" ]; then
              echo "Updating image tag in $manifest to $VERSION"
              yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/$app:$VERSION\"" "$manifest"
            else
              echo "Manifest file $manifest not found!"
              exit 1
            fi
          done

          manifest="$manifests_dir/shared/db-migration-job.yaml"
          if [ -f "$manifest" ]; then
            echo "Updating image tag in $manifest to $VERSION"
            yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/migrate:$VERSION\"" "$manifest"
          else
            echo "Manifest file $manifest not found!"
            exit 1
          fi

      - name: Commit and Push IaC changes
        working-directory: bazzalabs-orion
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m "chore: update manifests to v${{ needs.prepare.outputs.new_version }}"
          git push

  update-manifests-avelinapp-iac:
    name: Update manifests in avelinapp/iac
    runs-on: ubuntu-24.04
    needs: [prepare, create-manifests]
    permissions:
      contents: write

    steps:
      - name: Checkout IaC repo
        uses: actions/checkout@v4
        with:
          repository: avelinapp/iac
          token: ${{ secrets.GH_IAC_SECRET }}
          fetch-depth: 0
          path: avelinapp-iac

      - name: Update K8s manifests
        working-directory: avelinapp-iac
        run: |
          VERSION=v${{ needs.prepare.outputs.new_version }}
          apps=("web" "api" "sync")
          manifests_dir="gitops/cluster-apps/avelin"
          for app in "${apps[@]}"; do
            manifest="$manifests_dir/$app/${app}-deploy.yaml"
            if [ -f "$manifest" ]; then
              echo "Updating image tag in $manifest to $VERSION"
              yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/$app:$VERSION\"" "$manifest"
            else
              echo "Manifest file $manifest not found!"
              exit 1
            fi
          done

          manifest="$manifests_dir/shared/db-migration-job.yaml"
          if [ -f "$manifest" ]; then
            echo "Updating image tag in $manifest to $VERSION"
            yq e -i ".spec.template.spec.containers[].image = \"ghcr.io/avelinapp/migrate:$VERSION\"" "$manifest"
          else
            echo "Manifest file $manifest not found!"
            exit 1
          fi

      - name: Commit and Push IaC changes
        working-directory: avelinapp-iac
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m "chore: update manifests to v${{ needs.prepare.outputs.new_version }}"
          git push

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [update-manifests-bazzalabs-orion, update-manifests-avelinapp-iac]
    permissions:
      contents: write

    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          architecture: "x64"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create GitHub release
        run: pnpm release --ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
